{"version":3,"sources":["logo.png","api/motosumo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","create","baseURL","App","state","id","event","fetchEvent","a","console","log","motosumo","get","params","response","setState","data","this","timer","setInterval","className","src","logo","alt","columns","Header","accessor","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,mRCE5BC,E,OAAAA,EAAMC,OAAO,CAE1BC,QAAS,2DCqFIC,E,2MAjFbC,MAAQ,CACNC,GAAI,GACJC,MAAO,I,EAGTC,W,uCAAa,WAAMF,GAAN,eAAAG,EAAA,6DACXC,QAAQC,IAAI,oBADD,SAEYC,EAASC,IAAI,SAAU,CAC5CC,OAAQ,CACNR,GAAIA,KAJG,OAELS,EAFK,OAOXL,QAAQC,IAAII,GACZ,EAAKC,SAAS,CACZT,MAAOQ,EAASE,OATP,2C,yIAaQ,IAAD,OAElBC,KAAKV,WAAWU,KAAKZ,IACrBY,KAAKC,MAAQC,aAAY,kBAAM,EAAKZ,eAAc,O,2CAIlDE,QAAQC,IAAI,WAAYO,KAAKb,MAAME,S,+BA+BnC,OACE,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yEACA,yBAAKH,UAAU,aACb,kBAAC,IAAD,CAAYJ,KAAMC,KAAKb,MAAME,MAAOkB,QAjC5B,CACd,CACEC,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,MACRC,SAAU,UAEZ,CACED,OAAQ,WACRC,SAAU,YAEZ,CACED,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,iBACRC,SAAU,eAYR,uBAAGN,UAAU,YAAb,iBAEE,uBACEA,UAAU,WACVO,KAAK,uBACLC,OAAO,SACPC,IAAI,uBAJN,mB,GAnEMC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,cD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e828f94f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26b387d7.png\";","import axios from \"axios\"\n\nexport default axios.create({\n  //   baseURL: \"https://rest-dev.mo2tion.com/v2/api/event\",\n  baseURL: \"https://my-json-server.typicode.com/mo2tion/fake-event\"\n})\n","import React from \"react\"\nimport logo from \"./logo.png\"\nimport \"./App.css\"\nimport ReactTable from \"react-table\"\nimport \"react-table/react-table.css\"\nimport motosumo from \"./api/motosumo\"\n\nclass App extends React.Component {\n  state = {\n    id: 42,\n    event: []\n  }\n\n  fetchEvent = async id => {\n    console.log(\"fetching event..\")\n    const response = await motosumo.get(\"/event\", {\n      params: {\n        id: id\n      }\n    })\n    console.log(response)\n    this.setState({\n      event: response.data\n    })\n  }\n\n  componentDidMount() {\n    // fetch event now, and then every 1 minute\n    this.fetchEvent(this.id)\n    this.timer = setInterval(() => this.fetchEvent(), 60000)\n  }\n\n  componentDidUpdate() {\n    console.log(\"UPDATE: \", this.state.event)\n  }\n\n  render() {\n    const columns = [\n      {\n        Header: \"Chain\",\n        accessor: \"chain\"\n      },\n      {\n        Header: \"Gym\",\n        accessor: \"center\"\n      },\n      {\n        Header: \"Distance\",\n        accessor: \"distance\"\n      },\n      {\n        Header: \"kcal\",\n        accessor: \"kcal\"\n      },\n      {\n        Header: \"Hours\",\n        accessor: \"hours\"\n      },\n      {\n        Header: \"Unique members\",\n        accessor: \"n_users\"\n      }\n    ]\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Welcome to the Motosumo Global Event site!</p>\n          <div className=\"App-table\">\n            <ReactTable data={this.state.event} columns={columns} />\n          </div>\n          <p className=\"App-link\">\n            Powered by&nbsp;\n            <a\n              className=\"App-link\"\n              href=\"https://motosumo.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Motosumo\n            </a>\n          </p>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"react-app\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}